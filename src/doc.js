import fs from 'fs';
import { join } from 'path';

import decamelize from 'decamelize';
import ejs from 'ejs';
import { createApp } from 'vue';

import plugin from '../dist/library.mjs';
import { renderMarkdown, __dirname } from './utils.js';
import * as data from './data/index.js';

const render = (filePath, data) =>
  new Promise((resolve, reject) => {
    ejs.renderFile(filePath, data, {}, (err, str) => {
      if (err) return reject(err);

      resolve(str);
    });
  });

const app = createApp({});
app.use(plugin);

const components = app._context.components;
let toc = '';

const formatName = (name) => name.replace(/[^a-z0-9]+/gim, '_');

for (let name in components) {
  const filename = decamelize(name, { separator: '-' }) + '.md';
  const docPath = join(__dirname, `../docs/${filename}`);
  const renderPath = join(
    __dirname,
    `../example/src/components/docs/${name + 'Doc.vue'}`
  );
  toc += `- [${name}](./docs/${filename})\n`;

  if (fs.existsSync(docPath)) continue;

  const component = components[name];
  const content = await render(join(__dirname, '../templates/component.ejs'), {
    name,
    props: component.props || [],
    emits: component.emits || [],
    slots: data[name]?.slots || [],
    methods: data[name]?.methods || [],
    data,
    formatName,
  });

  fs.writeFileSync(
    docPath,
    `<!-- generated by doc script, do not edit -->\n\n# ${name}\n\n` + content
  );
  fs.writeFileSync(
    renderPath,
    `<template><!-- generated by doc script, do not edit -->${renderMarkdown(
      content
    )}</template>`
  );
}

console.log(toc);
fs.writeFileSync(
  join(__dirname, `../example/src/components/docs/index.js`),
  '// generated by doc script, do not edit\n\n' +
    Object.keys(components)
      .map((name) => `import ${name} from './${name}Doc.vue'`)
      .join('\n') +
    `\nexport default {
    ${Object.keys(components).join(',\n')}
  }`
);
